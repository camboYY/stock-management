@model IEnumerable<MvcMovie.Models.Product>

@{
    ViewData["Title"] = "Sale List";
}

<h2>@ViewData["Title"]</h2>

<form asp-action="OnSale" method="post">
    <input type="text" id="searchString" name="searchString" class="form-control" placeholder="Search Products" value="@ViewData["SearchString"]" />
    <button type="submit" class="btn btn-primary mt-2 mb-2">Search</button>

    <table class="table">
        <thead class="table-dark">
            <tr>
                <th>Product</th>
                <th>Price</th>
                <th>Quantity (OnSale)</th>
                <th>Select</th>
            </tr>
        </thead>
        <tbody id="productTableBody">
            @foreach (var product in Model)
            {
                <tr>
                    <td>@product.Title</td>
                    <td>@product.Price</td>
                    <td>@product.QtyOnHand</td>
                    <td><input type="checkbox" name="productIds" value="@product.Id" /></td>
                </tr>
            }
        </tbody>
    </table>

    <button type="submit" class="btn btn-primary">Process Sale</button>
</form>

@section Scripts {
    <script>
        // Trigger search as the user types
        const searchInput = document.getElementById('searchString');
        const productTableBody = document.getElementById('productTableBody');

        searchInput.addEventListener('input', function() {
            const searchQuery = searchInput.value;

            // Perform an AJAX request to update the product list as the user types
            fetch(`/Sale/Index?searchString=${encodeURIComponent(searchQuery)}`, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'  // Indicate it's an AJAX request
                }
            })
            .then(response => response.text())
            .then(html => {
                productTableBody.innerHTML = html;  // Update the product list dynamically
            });
        });
    </script>
}
