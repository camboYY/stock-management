@model List<MvcMovie.Models.Product>

@{
    ViewData["Title"] = "Saling";
}
<select asp-items="@ViewData["CustomerList"] as IEnumerable<SelectListItem>" id="CustomerId">
    <option disabled selected>--select Customer--</option>
</select>

<select asp-items="@ViewData["RateList"] as IEnumerable<SelectListItem>" id="RateId">
    <option disabled selected>--select Rate--</option>
</select>

<p style="display: flex; ">
    <input type="number" name="deposit" id="sumDeposit" class="form-control" placeholder="Deposit" />
    <input type="date" name="saleDate" id="SaleDate" class="form-control" placeholder="Sale Date" />
<div class="input-group date" data-provide="datepicker">
    <input type="text" class="form-control">
    <div class="input-group-addon">
        <span class="glyphicon glyphicon-th"></span>
    </div>
</div>
<div class="form-check">
    <input class="form-check-input" type="checkbox" value="" id="Status" />
    <label class="form-check-label" for="Status">
        Paid
    </label>
</div>
</p>
<table class="table" id="dataTable">
    <thead>
        <tr>
            <th>
                #
            </th>
            <th>
                Title
            </th>
            <th>
                Items per Unit
            </th>
            <th>
                Cost
            </th>
            <th>
                Unit
            </th>
            <th>
                Price
            </th>
            <th>
                Discount
            </th>
            <th>
                Total
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    <select asp-items="@ViewData["UnitTypeList"] as IEnumerable<SelectListItem>" class="unitTypeId">
                        <option disabled selected>--select UnitType--</option>
                    </select>
                </td>
                <td>
                    <input style="width: 100px;" name="cost" class="cost" oninput="calculateTotal(this)" />
                </td>
                <td>
                    <input style="width: 100px;" type="number" name="unit" class="unit" oninput="calculateTotal(this)" />
                </td>
                <td>
                    <input style="width: 100px;" value="@item.Price" name="price" class="price"
                        oninput="calculateTotal(this)" />
                </td>
                <td>
                    <input style="width: 100px;" type="number" name="discount" class="discount"
                        oninput="calculateTotal(this)" />
                </td>

                <td>
                    <p class="total">0</p>
                </td>

            </tr>
        }

    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" style="text-align: right;"><strong>Total</strong></td>
            <td id="sumCost"></td>
            <td id="sumUnit"></td>
            <td id="sumPrice"></td>
            <td id="sumDiscount"></td>
            <td id="sumTotal" style="font: bold;"></td>
        </tr>
    </tfoot>
</table>
<button class="confirm btn btn-outline-secondary" id="myButton">Confirm</button>

@section scripts {
    <script type="text/javascript">

        function calculateTotal(element) {
            // Get the current row
            let row = element.closest("tr");

            // Get the price and quantity from the row
            let cost = row.querySelector(".cost").value || 0;
            let unit = row.querySelector(".unit").value || 0;
            let price = row.querySelector(".price").value || 0;
            let discount = row.querySelector(".discount").value || 0;
            // Calculate the total
            let total = parseFloat(price) * parseFloat(unit);
            const afterDiscount = total - parseFloat(discount)
            // Update the total column in that row

            row.querySelector(".total").innerText = afterDiscount.toFixed(2);
            calculateTotals();
        }


        function calculateTotals() {
            let sumPrice = 0, sumTotal = 0, sumDiscount = 0, sumUnit = 0, sumCost = 0;

            document.querySelectorAll(".price").forEach(cell => {
                sumPrice += parseFloat(cell.value) || 0;
            });
            document.querySelectorAll(".cost").forEach(cell => {
                sumCost += parseFloat(cell.value) || 0;
            });
            document.querySelectorAll(".unit").forEach(cell => {
                sumUnit += parseFloat(cell.value) || 0;
            });
            document.querySelectorAll(".discount").forEach(cell => {
                sumDiscount += parseFloat(cell.value) || 0;
            });


            document.querySelectorAll(".total").forEach(cell => {
                sumTotal += parseFloat(cell.innerText) || 0;
            });

            document.getElementById("sumDiscount").innerText = sumDiscount;
            document.getElementById("sumPrice").innerText = sumPrice;
            document.getElementById("sumUnit").innerText = sumUnit;
            document.getElementById("sumTotal").innerText = sumTotal;
            document.getElementById("sumCost").innerText = sumCost;

            getTableData()

        }

        let tableDataSubmit = [];

        function getTableData() {
            let tableData = [];

            document.querySelectorAll("#dataTable tbody tr").forEach(row => {
                const rowData = {
                    ProductId: parseInt(row.cells[0].innerText),
                    Unit: parseInt(row.querySelector(".unit").value) || 0,
                    Price: parseFloat(row.querySelector(".price").value) || 0,
                    Discount: parseFloat(row.querySelector(".discount").value) || 0,
                    UnitTypeId: parseInt(row.querySelector(".unitTypeId").value) || 0,
                    Cost: parseFloat(row.querySelector(".cost")).value || 0,
                };

                tableData.push(rowData);
            });


            let deposit = document.getElementById("sumDeposit").value || 0;

            tableDataSubmit = {
                list: tableData,
                sum: {
                    sumDiscount: parseFloat(document.getElementById("sumDiscount").innerText) || 0,
                    sumPrice: parseInt(document.getElementById("sumPrice").innerText) || 0,
                    sumDeposit: parseInt(deposit) || 0,
                    sumTotal: parseInt(document.getElementById("sumTotal").innerText) || 0,
                    Status: document.getElementById("Status").checked,
                }
            }

        }

        document.getElementById('myButton').addEventListener('click', function () {
            var CustomerId = parseInt(document.getElementById("CustomerId").value)
            var RateId = parseInt(document.getElementById("RateId").value)
            var SaleDate = (document.getElementById("SaleDate").value)
            tableDataSubmit = {
                ...tableDataSubmit,
                sum: {
                    ...tableDataSubmit.sum, CustomerId, RateId, SaleDate
                }
            }

            $.ajax({
                url: "/Sale/OnConfirmSale",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(tableDataSubmit),
                success: function (response) {
                    console.log({ response: response.redirectUrl })
                    window.location.href = response.redirectUrl;
                },
                error: function (xhr) {
                    console.log({ xhr })
                }
            });
        });


    </script>
}