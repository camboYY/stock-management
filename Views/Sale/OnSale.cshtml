@model MvcMovie.Models.SaleViewModel

<h2>Sale Processing</h2>

@using (Html.BeginForm("ConfirmSale", "Sale", FormMethod.Post))
{
    <!-- Select Customer -->
    <div class="form-group">
        <label for="CustomerId">Select Customer</label>
        <select id="CustomerId" name="CustomerId" class="form-control" asp-items="ViewBag.Customers">
            <option disabled selected>-- Select Customer --</option>
        </select>
    </div>

    <table class="table mt-2">
        <thead class="table-dark">
            <tr>
                <th>Product</th>
                <th>Quantity (OnSale)</th>
                <th>Price $</th>
                <th>Discount %</th>
                <th>Total $</th>
            </tr>
        </thead>
        <tbody id="selectedProducts">
            @foreach (var product in Model.SelectedProducts)
            {
                <tr data-product-id="@product.Id">
                    <td>@product.Title</td>
                    <td>
                        <input type="number" 
                            name="Quantities[@product.Id]" 
                            class="form-control quantity" 
                            min="1" 
                            max="@product.QtyOnHand" 
                            data-max="@product.QtyOnHand" 
                            value="1" />
                    </td>
                    <td>
                        <input type="number" 
                            name="UnitCosts[@product.Id]" 
                            class="form-control unitCost" 
                            min="0" 
                            step="0.01" 
                            value="@product.Price" />
                    </td>
                    <td>
                        <input type="number" 
                            name="Discounts[@product.Id]" 
                            class="form-control discount" 
                            min="0" 
                            max="99" 
                            step="0.01" 
                            value="0" />
                    </td>
                    <td>
                        <span class="totalPrice">@(product.Price)</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Deposit Input -->
    <div class="form-group">
        <label for="totalDeposit">Deposit (for total)</label>
        <input type="number" id="totalDeposit" name="Deposit" class="form-control" min="0" step="0.01" value="0" />
    </div>

    <!-- Grand Total Display -->
    <div class="form-group text-right">
        <label>Total Price After Deposit:</label>
        <span id="totalPriceAfterDeposit" class="form-control-static">0.00</span>
    </div>

    <button type="submit" class="btn btn-primary">Confirm Sale</button>
}

@section Scripts
{
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const quantityInputs = document.querySelectorAll('.quantity');
            const costInputs = document.querySelectorAll('.unitCost');
            const discountInputs = document.querySelectorAll('.discount');
            const totalPriceElements = document.querySelectorAll('.totalPrice');
            const depositInput = document.getElementById('totalDeposit');
            const totalPriceAfterDepositElement = document.getElementById('totalPriceAfterDeposit');

            // Function to update individual product total and grand total
            function updateTotal(index) {
                const quantity = parseFloat(quantityInputs[index].value) || 0;
                const unitCost = parseFloat(costInputs[index].value) || 0;
                const discount = parseFloat(discountInputs[index].value) || 0;

                // Limit discount to 99%
                if (discount > 99) {
                    discountInputs[index].value = 99;
                }

                // Ensure quantity does not exceed stock
                const maxQty = parseInt(quantityInputs[index].dataset.max);
                if (quantity > maxQty) {
                    quantityInputs[index].value = maxQty;
                }

                // Calculate total per product
                const total = (quantity * (unitCost - (unitCost * discount / 100))).toFixed(2);

                // Update total price in table
                totalPriceElements[index].textContent = total;

                // Recalculate grand total
                calculateGrandTotal();
            }

            // Function to calculate grand total after deposit
            function calculateGrandTotal() {
                let grandTotal = 0;
                totalPriceElements.forEach(element => {
                    grandTotal += parseFloat(element.textContent) || 0;
                });

                // Subtract deposit
                const deposit = parseFloat(depositInput.value) || 0;
                grandTotal -= deposit;

                // Update total after deposit
                totalPriceAfterDepositElement.textContent = grandTotal.toFixed(2);
            }

            // Attach event listeners to inputs
            quantityInputs.forEach((input, index) => input.addEventListener('input', () => updateTotal(index)));
            costInputs.forEach((input, index) => input.addEventListener('input', () => updateTotal(index)));
            discountInputs.forEach((input, index) => input.addEventListener('input', () => updateTotal(index)));
            depositInput.addEventListener('input', calculateGrandTotal);

            // Initialize calculation
            calculateGrandTotal();
        });
    </script>
}
